using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Hertzole.ALE.SourceGenerator.Scopes
{
	public sealed class SourceScope : IDisposable
	{
		private static readonly StringBuilder sb = new StringBuilder();

		private readonly string sourceName;
		public readonly SourceProductionContext context;

		private readonly List<string> usings = new List<string>();
		private readonly List<string> writeCommands = new List<string>();

		public int Indent { get; set; }

		public SourceScope(string name, SourceProductionContext context)
		{
			sourceName = name;
			this.context = context;
		}

		public void Write(string? value = null, bool includeIndent = true)
		{
			writeCommands.Add(FormatWriteCommand(value, includeIndent, false));
		}

		public void WriteLine(string? value = null, bool includeIndent = true)
		{
			writeCommands.Add(FormatWriteCommand(value, includeIndent, true));
		}

		public TypeScope WithClass(string name)
		{
			return new TypeScope(this, name, TypeType.Class);
		}

		public TypeScope WithStruct(string name)
		{
			return new TypeScope(this, name, TypeType.Struct);
		}

		public TypeScope WithInterface(string name)
		{
			return new TypeScope(this, name, TypeType.Interface);
		}

		public void WriteUsing(string value)
		{
			usings.Add(value);
		}
		
		public string FormatWriteCommand(string? value = null, bool includeIndent = true, bool newLine = false)
		{
			return GetIndent(includeIndent ? Indent : 0) + value + (newLine ? "\n" : "");
		}

		public void Dispose()
		{
			sb.AppendLine("// <auto-generated>");
			sb.AppendLine("// \t\tThis file was generated by the ALE source generator.");
			sb.AppendLine("// \t\tDo not edit this file manually.");
			sb.AppendLine("// </auto-generated>\n");

			if (usings.Count > 0)
			{
				for (int i = 0; i < usings.Count; i++)
				{
					sb.AppendLine($"using {usings[i]};");
				}

				sb.AppendLine();
			}
			
			foreach (string command in writeCommands)
			{
				sb.Append(command);
			}

			context.AddSource(sourceName + ".g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));

			sb.Clear();
		}

		public string GetIndent()
		{
			return GetIndent(Indent);
		}

		public string GetIndent(int indentAmount)
		{
			return new string('\t', indentAmount);
		}
	}
}