"use strict";(self.webpackChunkale_docs=self.webpackChunkale_docs||[]).push([[593],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3554:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),s=["components"],o={sidebar_position:4},l="Custom Types",c={unversionedId:"serialization/custom-types",id:"serialization/custom-types",title:"Custom Types",description:"When your type isn't a C# primitive or a Unity primitive, ALE will attempt to create a serializer for it.",source:"@site/docs/serialization/custom-types.md",sourceDirName:"serialization",slug:"/serialization/custom-types",permalink:"/advanced-level-editor/docs/serialization/custom-types",editUrl:"https://github.com/hertzole/advanced-level-editor/tree/master/docs/docs/serialization/custom-types.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Unity Primitives",permalink:"/advanced-level-editor/docs/serialization/unity-primitives"},next:{title:"JSON Serialization",permalink:"/advanced-level-editor/docs/serialization/json-serialization"}},u=[],p={toc:u};function d(e){var t=e.components,r=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-types"},"Custom Types"),(0,a.kt)("p",null,"When your type isn't a C# primitive or a Unity primitive, ALE will attempt to create a serializer for it. "),(0,a.kt)("p",null,"At the moment, only ",(0,a.kt)("inlineCode",{parentName:"p"},"struct")," types can be serialized. For all the rules that apply when serializing a custom type, see\n",(0,a.kt)("a",{parentName:"p",href:"/docs/serialization/about-serialization/#when-serializing-custom-types"},"Serialization Rules/When serializing custom types"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Generated Code"),(0,a.kt)("p",null,(0,a.kt)("p",null,"This is the struct that it will serialize."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public struct MyStruct\n{\n    public int test1;\n    public string test2;\n}\n")),(0,a.kt)("p",null,"This is the generated formatter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using System;\nusing Hertzole.ALE.Tests.TestScripts;\nusing MessagePack;\nusing MessagePack.Formatters;\n\npublic class MyStruct_Formatter : IMessagePackFormatter<MyStruct>, IMessagePackFormatter\n{\n    public void Serialize(ref MessagePackWriter writer, MyStruct value, MessagePackSerializerOptions options)\n    {\n        IFormatterResolver resolver = options.Resolver;\n        writer.WriteArrayHeader(4);\n        // Hashed from value1\n        writer.WriteInt32(768721960);\n        writer.WriteInt32(value.test1);\n        // Hashed from value2\n        writer.WriteInt32(768721961);\n        resolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.test2, options);\n    }\n\n    public MyStruct Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\n    {\n        if (reader.TryReadNil())\n        {\n            throw new InvalidOperationException("typecode is null, struct not supported");\n        }\n        options.Security.DepthStep(ref reader);\n        int test = 0;\n        string test2 = null;\n        DeserializeFormat1(ref reader, options, ref test, ref test2);\n        MyStruct result = default(MyStruct);\n        result.test1 = test;\n        result.test2 = test2;\n        reader.Depth--;\n        return result;\n    }\n\n    private static void DeserializeFormat1(ref MessagePackReader P_0, MessagePackSerializerOptions P_1, ref int test1, ref string test2)\n    {\n        IFormatterResolver resolver = P_1.Resolver;\n        int num = P_0.ReadArrayHeader();\n        for (int i = 0; i < num / 2; i++)\n        {\n            switch (P_0.ReadInt32())\n            {\n            case 768721960: // value1\n                test1 = P_0.ReadInt32();\n                break;\n            case 768721961: // value2\n                test2 = P_0.ReadString();\n                break;\n            default:\n                P_0.Skip();\n                break;\n            }\n        }\n    }\n}\n')))))}d.isMDXComponent=!0}}]);